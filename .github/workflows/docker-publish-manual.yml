name: Docker (manual)

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
    inputs:
      input_year:
        description: "Year (YYYY) version of TexLive, default of `latest`"
        required: false
        default: latest
      input_variant:
        description: "Ubuntu version (noble:24.04 LTS, jammy:22.04 LTS) (use jammy on local arm64/Apple Silicon)"
        type: choice
        options: 
          - noble
          - jammy
      input_variant_default:
        description: "Use this Ubuntu version as the default for the TeXLive year version"
        type: boolean

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository_owner }}/latex # ${{ github.repository }}
  # Default value of matrix
  SCHEME_DEFAUTL: full
  # VARIANT_DEFAUTL: jammy


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    strategy:
      matrix:
        scheme: # https://tug.org/texlive/doc/texlive-en/texlive-en.html#x1-26025r8
          - full      # a [ ] full scheme (everything) 
          - medium    # b [ ] medium scheme (small + more packages and languages) 
          - small     # c [ ] small scheme (basic + xetex, metapost, a few languages) 
          - basic     # d [ ] basic scheme (plain and latex) 
          - minimal   # e [ ] minimal scheme (plain only) 
          - infraonly # f [ ] infrastructure-only scheme (no TeX at all) 
          # -           # g [ ] book publishing scheme (core LaTeX and add-ons) 
          # -           # h [ ] ConTeXt scheme 
          # -           # i [ ] GUST TeX Live scheme 
          # -           # j [ ] teTeX scheme (more than medium, but nowhere near full) 
          # -           # k [ ] custom selection of collections
    name: Build TeXLive [${{ matrix.scheme }}-${{ inputs.input_variant }}]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Install the cosign tool except on PR
      # # https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@v3.1.1
      #   with:
      #     cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Obtain TeXLive year version
      - name: Obtain TeXLive year version
        id: year
        run: |
          if [ "${{ inputs.input_year }}" = "" ] || [ "${{ inputs.input_year }}" = "latest" ]; then \
              wget --no-check-certificate https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; \
              zcat < install-tl-unx.tar.gz | tar -xf -; \
              echo "TEXLIVE_YEAR=$(ls -d install-tl-2* | cut -c 12-15)" >> $GITHUB_ENV; \
              echo "TEXLIVE_YEAR=$(ls -d install-tl-2* | cut -c 12-15)"; \
          else \
              echo "TEXLIVE_YEAR=${{ inputs.input_year }}" >> $GITHUB_ENV; \
              echo "TEXLIVE_YEAR=${{ inputs.input_year }}"; \
          fi

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=LaTeX
          tags: |
            type=schedule,pattern={{date 'YYYYMM'}},enable=${{ inputs.input_variant_default && matrix.scheme==env.SCHEME_DEFAUTL }}
            type=ref,event=branch,enable=${{ inputs.input_variant_default && matrix.scheme==env.SCHEME_DEFAUTL }}
            type=ref,event=tag,enable=${{ inputs.input_variant_default && matrix.scheme==env.SCHEME_DEFAUTL }}
            type=ref,event=pr
            
            type=raw,enable=${{ inputs.input_year=='latest' }},value=${{ matrix.scheme }}-${{ inputs.input_variant }}
            type=raw,enable=${{ inputs.input_year=='latest' }},value=latest-${{ matrix.scheme }}-${{ inputs.input_variant }}
            type=raw,enable=true,value=${{ env.TEXLIVE_YEAR }}-${{ matrix.scheme }}-${{ inputs.input_variant }}

            type=raw,enable=${{ inputs.input_variant_default && inputs.input_year=='latest' }},value=${{ matrix.scheme }}
            type=raw,enable=${{ inputs.input_variant_default && inputs.input_year=='latest' }},value=latest-${{ matrix.scheme }}
            type=raw,enable=${{ inputs.input_variant_default }},value=${{ env.TEXLIVE_YEAR }}-${{ matrix.scheme }}
            type=raw,enable=${{ matrix.scheme==env.SCHEME_DEFAUTL && inputs.input_year=='latest' }},value=${{ inputs.input_variant }}
            type=raw,enable=${{ matrix.scheme==env.SCHEME_DEFAUTL && inputs.input_year=='latest' }},value=latest-${{ inputs.input_variant }}
            type=raw,enable=${{ matrix.scheme==env.SCHEME_DEFAUTL }},value=${{ env.TEXLIVE_YEAR }}-${{ inputs.input_variant }}

            type=raw,enable=${{ inputs.input_variant_default && matrix.scheme==env.SCHEME_DEFAUTL && inputs.input_year=='latest' }},value=latest
            type=raw,enable=${{ inputs.input_variant_default && matrix.scheme==env.SCHEME_DEFAUTL }},value=${{ env.TEXLIVE_YEAR }}
      
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push-latest
        uses: docker/build-push-action@v5.0.0
        if: ${{ !(matrix.scheme == 'full' && github.event_name == 'pull_request') }}
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            TEXLIVE_YEAR=${{ env.TEXLIVE_YEAR }}
            SCHEME=${{ matrix.scheme }}
            VARIANT=${{ inputs.input_variant }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name == 'workflow_dispatch' }}
      #   env:
      #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #     TAGS: ${{ steps.meta.outputs.tags }}
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      
